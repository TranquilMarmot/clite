Begin parsing... programs/factorial.cpp

Program (abstract syntax): 
  Declarations: 
    Declarations = {<n, int>, <i, int>, <f, int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 3
    Assignment: 
      Variable: i
      IntValue: 1
    Assignment: 
      Variable: f
      IntValue: 1
    Loop: 
      Binary: 
        Operator: <
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          Variable: i
          Binary: 
            Operator: +
            Variable: i
            IntValue: 1
        Assignment: 
          Variable: f
          Binary: 
            Operator: *
            Variable: f
            Variable: i

Begin type checking...programs/factorial.cpp

Type map:
{ <i, int>, <f, int>, <n, int> }

Transformed Abstract Syntax Tree

Program (abstract syntax): 
  Declarations: 
    Declarations = {<n, int>, <i, int>, <f, int>}
  Block: 
    Assignment: 
      Variable: n
      IntValue: 3
    Assignment: 
      Variable: i
      IntValue: 1
    Assignment: 
      Variable: f
      IntValue: 1
    Loop: 
      Binary: 
        Operator: INT<
        Variable: i
        Variable: n
      Block: 
        Assignment: 
          Variable: i
          Binary: 
            Operator: INT+
            Variable: i
            IntValue: 1
        Assignment: 
          Variable: f
          Binary: 
            Operator: INT*
            Variable: f
            Variable: i

Begin interpreting...programs/factorial.cpp

Final State
{ <i, 3>, <f, 6>, <n, 3> }
